
// Serverless function f√∂r att h√§mta FPL data (api/fpl-data.js)

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    console.log('üöÄ H√§mtar FPL data fr√•n server...');

    // Team IDs f√∂r er liga
    const TEAM_IDS = {
      1102453: 'Fredrik Lillb√§ck',
      159609: 'Anton Str√∂m', 
      2571381: 'Sebastian Bonasoni',
      5475077: 'Oscar Jonsson',
      2373878: 'August B√•ng',
      4000088: 'Samuel Rosqvist',
      240747: 'Jakob Hammarstr√∂m',
      4915802: 'Emil J√∂nsson',
      1703536: 'Elias H√•kansson'
    };

    // H√§mta grundl√§ggande info
    const bootstrapResponse = await fetch('https://fantasy.premierleague.com/api/bootstrap-static/');
    const bootstrap = await bootstrapResponse.json();
    const currentGW = bootstrap.events.find(event => event.is_current)?.id || 5;

    console.log(`üìä Aktuell gameweek: ${currentGW}`);

    const players = [];

    // H√§mta data f√∂r varje spelare
    for (const [teamId, playerName] of Object.entries(TEAM_IDS)) {
      try {
        console.log(`‚è≥ H√§mtar data f√∂r ${playerName}...`);

        // Grunddata om spelaren
        const playerResponse = await fetch(`https://fantasy.premierleague.com/api/entry/${teamId}/`);
        const playerData = await playerResponse.json();

        // Historik f√∂r po√§ng per gameweek
        const historyResponse = await fetch(`https://fantasy.premierleague.com/api/entry/${teamId}/history/`);
        const historyData = await historyResponse.json();

        // Live po√§ng f√∂r aktuell gameweek (om den har b√∂rjat)
        let currentGWPoints = 0;
        try {
          const liveResponse = await fetch(`https://fantasy.premierleague.com/api/entry/${teamId}/event/${currentGW}/picks/`);
          if (liveResponse.ok) {
            const liveData = await liveResponse.json();
            currentGWPoints = liveData.entry_history?.points || 0;
          }
        } catch (liveError) {
          console.log(`‚ö†Ô∏è Ingen live-data f√∂r ${playerName} GW${currentGW}`);
        }

        players.push({
          name: playerName,
          teamId: parseInt(teamId),
          teamName: playerData.name,
          totalPoints: playerData.summary_overall_points,
          currentGWPoints: currentGWPoints,
          rank: 0, // Ber√§knas efter sortering
          history: historyData.current || [],
          lastUpdated: new Date().toISOString()
        });

        console.log(`‚úÖ ${playerName}: ${playerData.summary_overall_points} totalt, ${currentGWPoints} denna GW`);

        // Kort paus mellan requests
        await new Promise(resolve => setTimeout(resolve, 200));

      } catch (playerError) {
        console.error(`‚ùå Fel f√∂r ${playerName}:`, playerError.message);
        
        // Fallback data
        players.push({
          name: playerName,
          teamId: parseInt(teamId),
          teamName: TEAM_IDS[teamId],
          totalPoints: 0,
          currentGWPoints: 0,
          rank: 0,
          history: [],
          lastUpdated: new Date().toISOString(),
          error: playerError.message
        });
      }
    }

    // Sortera efter totalpo√§ng och s√§tt rank
    players.sort((a, b) => b.totalPoints - a.totalPoints);
    players.forEach((player, index) => {
      player.rank = index + 1;
    });

    // Ber√§kna swish-historik
    const swishHistory = calculateSwishHistory(players);

    const responseData = {
      success: true,
      lastUpdated: new Date().toISOString(),
      currentGameweek: currentGW,
      totalPlayers: players.length,
      players: players,
      swishHistory: swishHistory,
      generatedAt: new Date().toLocaleString('sv-SE'),
      source: 'FPL API (Serverless)'
    };

    console.log('‚úÖ Data komplett - skickar till klient');

    res.status(200).json(responseData);

  } catch (error) {
    console.error('‚ùå Server error:', error);
    
    // Fallback response
    res.status(200).json({
      success: false,
      error: error.message,
      lastUpdated: new Date().toISOString(),
      currentGameweek: 5,
      players: [
        { name: 'Fredrik Lillb√§ck', totalPoints: 241, currentGWPoints: 0, teamName: 'Lil B United', rank: 1 },
        { name: 'Anton Str√∂m', totalPoints: 238, currentGWPoints: 0, teamName: 'Arnes Army', rank: 2 },
        { name: 'Sebastian Bonasoni', totalPoints: 232, currentGWPoints: 0, teamName: 'Mudryks monsters', rank: 3 },
        { name: 'Oscar Jonsson', totalPoints: 223, currentGWPoints: 0, teamName: 'FC B√§rsalona', rank: 4 },
        { name: 'August B√•ng', totalPoints: 220, currentGWPoints: 0, teamName: 'Club de national', rank: 5 },
        { name: 'Samuel Rosqvist', totalPoints: 209, currentGWPoints: 0, teamName: 'Samlag1', rank: 6 },
        { name: 'Jakob Hammarstr√∂m', totalPoints: 207, currentGWPoints: 0, teamName: 'Hammarstr√∂m FC', rank: 7 },
        { name: 'Emil J√∂nsson', totalPoints: 201, currentGWPoints: 0, teamName: 'McJ√∂nnister', rank: 8 },
        { name: 'Elias H√•kansson', totalPoints: 200, currentGWPoints: 0, teamName: 'Hawkansun', rank: 9 }
      ],
      swishHistory: [
        { gameweek: 1, loser: 'Samuel Rosqvist', points: 42, swishAmount: 30 },
        { gameweek: 2, loser: 'August B√•ng', points: 36, swishAmount: 30 },
        { gameweek: 3, loser: 'Emil J√∂nsson', points: 24, swishAmount: 30 },
        { gameweek: 4, loser: 'Elias H√•kansson', points: 59, swishAmount: 30 }
      ],
      source: 'Fallback data'
    });
  }
}

// Hj√§lpfunktion f√∂r att ber√§kna swish-historik
function calculateSwishHistory(players) {
  const swishHistory = [];
  
  // H√•rdkodad swish-historik fr√•n GW1-4 (k√§nd data)
  const knownSwish = [
    { gameweek: 1, loser: 'Samuel Rosqvist', points: 42, swishAmount: 30 },
    { gameweek: 2, loser: 'August B√•ng', points: 36, swishAmount: 30 },
    { gameweek: 3, loser: 'Emil J√∂nsson', points: 24, swishAmount: 30 },
    { gameweek: 4, loser: 'Elias H√•kansson', points: 59, swishAmount: 30 }
  ];
  
  swishHistory.push(...knownSwish);
  
  // TODO: L√§gg till automatisk ber√§kning f√∂r nya gameweeks
  // baserat p√• players[].history data
  
  return swishHistory;
}
